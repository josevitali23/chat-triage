<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Consulta Médica Virtual</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        :root {
            --primary: #6B46C1;
            --secondary: #553C9A;
            --accent: #9F7AEA;
            --light-purple: #EDF2F7;
            --background: #FAF5FF;
        }

        body {
            font-family: 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--background);
        }

        .chat-gradient {
            background: linear-gradient(180deg, #FAF5FF 0%, #F3E8FF 100%);
        }

        .message-in {
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 2px 4px rgba(107, 70, 193, 0.1);
        }

        .message-out {
            background-color: var(--primary);
            border-radius: 12px;
            color: white;
        }

        .custom-shadow {
            box-shadow: 0 4px 6px -1px rgba(107, 70, 193, 0.1), 0 2px 4px -1px rgba(107, 70, 193, 0.06);
        }

        .purple-gradient {
            background: linear-gradient(135deg, #6B46C1 0%, #805AD5 100%);
        }
    </style>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body class="min-h-screen">
    <nav class="purple-gradient text-white shadow-lg">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between h-16">
                <div class="flex items-center">
                    <img src="https://assets.website-files.com/5e1f4a5c04a2d590242d98a8/5e2745ccfe29f0dbeb364109_Logo_.png" alt="Logo" class="h-8 w-auto">
                    <span class="ml-2 text-xl font-semibold">Consulta Virtual</span>
                </div>
            </div>
        </div>
    </nav>

    <main class="max-w-4xl mx-auto px-4 py-8">
        <div class="bg-white rounded-2xl custom-shadow overflow-hidden">
            <div class="p-6 border-b border-purple-100">
                <h1 class="text-2xl font-bold text-purple-900">Tu Consulta Médica Virtual</h1>
                <p class="mt-2 text-purple-600">Describe tus síntomas o realiza tu consulta médica</p>
            </div>

            <div id="chat-container" class="h-[500px] p-6 overflow-y-auto chat-gradient">
                <div id="messages" class="space-y-4">
                    <div class="message-in p-4 max-w-[80%]">
                        <p class="text-purple-900">
                            Bienvenido a tu consulta médica virtual. ¿En qué puedo ayudarte hoy?
                        </p>
                    </div>
                </div>
            </div>

            <div class="p-4 bg-white border-t border-purple-100">
                <div class="flex space-x-3">
                    <input type="text" 
                           id="message-input"
                           class="flex-1 rounded-lg border border-purple-200 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"
                           placeholder="Escribe tu consulta aquí...">
                    <button id="send-btn"
                            class="bg-purple-600 text-white px-6 py-2 rounded-lg hover:bg-purple-700 transition duration-300 flex items-center">
                        <span>Enviar</span>
                        <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"/>
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    </main>

    <script>
        const socket = io();
        const messageInput = document.getElementById('message-input');
        const sendBtn = document.getElementById('send-btn');
        const messagesContainer = document.getElementById('messages');

        function createLoadingMessage() {
            const loadingEl = document.createElement('div');
            loadingEl.id = 'loading-message';
            loadingEl.className = 'message-in p-4 max-w-[80%] animate-pulse';
            loadingEl.innerHTML = `
                <div class="flex items-center space-x-2">
                    <div class="w-4 h-4 border-2 border-purple-500 border-t-transparent rounded-full animate-spin"></div>
                    <span class="text-purple-600">El médico está escribiendo...</span>
                </div>
            `;
            return loadingEl;
        }

        function removeLoadingMessage() {
            const existingLoading = document.getElementById('loading-message');
            if (existingLoading) existingLoading.remove();
        }

        function appendMessage(content, isUser = false) {
            const messageEl = document.createElement('div');
            messageEl.className = isUser 
                ? 'message-out p-4 max-w-[80%] ml-auto bg-purple-600' 
                : 'message-in p-4 max-w-[80%]';
            messageEl.innerHTML = `<p class="${isUser ? 'text-white' : 'text-purple-900'}">${content}</p>`;
            messagesContainer.appendChild(messageEl);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        sendBtn.addEventListener('click', sendMessage);
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') sendMessage();
        });

        socket.on('assistant-message', (message) => {
            removeLoadingMessage();
            appendMessage(message, false);
        });

        socket.on('redirect', (url) => {
            removeLoadingMessage();
            window.location.href = url;
        });

        socket.on('error', (errorMsg) => {
            removeLoadingMessage();
            const errorEl = document.createElement('div');
            errorEl.className = 'message-in p-4 max-w-[80%] bg-red-50 border border-red-200';
            errorEl.innerHTML = `<p class="text-red-600">Error: ${errorMsg}</p>`;
            messagesContainer.appendChild(errorEl);
        });

        function sendMessage() {
            const message = `<user_symptoms>${messageInput.value.trim()}</user_symptoms>` ;
            if (message) {
                removeLoadingMessage();
                appendMessage(message, true);
                messagesContainer.appendChild(createLoadingMessage());
                socket.emit('patient-message', message);
                messageInput.value = '';
            }
        }
    </script>
</body>
</html>