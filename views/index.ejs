<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Consulta Médica - <%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        /* Custom brand colors for Sofia Salud SA */
        :root {
            --primary-color: #1A5F7A;
            --secondary-color: #159895;
            --accent-color: #57C5B6;
            --background-color: #F8FAFA;
        }
    </style>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body class="bg-blue-100 flex items-center justify-center min-h-screen">
    <div class="bg-white p-8 rounded-xl shadow-lg w-full max-w-2xl">
        <h1 class="text-2xl font-bold text-blue-600 mb-4">Consulta Médica en Línea</h1>
        <p class="text-gray-600 mb-6"><%= description %></p>
        
        <div id="chat-container" class="h-96 overflow-y-auto mb-4 border p-2 bg-blue-50 rounded">
            <div id="messages" class="space-y-3">
                <div class="text-gray-500 italic text-center">
                    Bienvenido, por favor describe tu síntoma o pregunta médica
                </div>
            </div>
        </div>
        
        <div class="flex items-center space-x-2">
            <input type="text" id="message-input" 
                   class="flex-grow p-2 border rounded"
                   placeholder="Escribe tu síntoma o pregunta...">
            
            <button id="send-btn" 
                    class="bg-blue-500 text-white p-2 rounded hover:bg-blue-600 transition duration-300">
                Enviar
            </button>
        </div>
    </div>

    <script>
        const socket = io();
        const messageInput = document.getElementById('message-input');
        const sendBtn = document.getElementById('send-btn');
        const messagesContainer = document.getElementById('messages');

        function createLoadingMessage() {
            const loadingEl = document.createElement('div');
            loadingEl.id = 'loading-message';
            loadingEl.classList.add(
                'p-3', 
                'rounded', 
                'bg-blue-100', 
                'text-blue-800', 
                'max-w-[80%]', 
                'mx-auto',
                'animate-pulse'  // Tailwind animation for pulsing effect
            );
            loadingEl.innerHTML = `
                <div class="flex items-center">
                    <svg class="w-5 h-5 mr-2 text-blue-500 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                    </svg>
                    <span>Procesando tu consulta médica...</span>
                </div>
            `;
            return loadingEl;
        }

        function removeLoadingMessage() {
            const existingLoading = document.getElementById('loading-message');
            if (existingLoading) {
                existingLoading.remove();
            }
        }

        sendBtn.addEventListener('click', sendMessage);
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') sendMessage();
        });

        socket.on('assistant-message', (message) => {
            removeLoadingMessage();
            const messageEl = document.createElement('div');
            messageEl.classList.add(
                'p-3', 
                'rounded', 
                'bg-blue-100', 
                'text-gray-800', 
                'max-w-[80%]', 
                'mx-auto'
            );
            messageEl.innerHTML = `
                <div class="flex items-start">
                    <svg class="w-6 h-6 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.102.213-.2.431-.29.658C10.607 13.38 9.397 14 8 14c-1.657 0-3-1.343-3-3 0-.454.098-.88.272-1.265M7 9.667V4h1.333C9.525 4 10 4.475 10 5.333v.334c0 .858-.475 1.333-1.333 1.333H7z"></path>
                    </svg>
                    <span>${message}</span>
                </div>
            `;
            messagesContainer.appendChild(messageEl);
            
            // Auto-scroll to bottom
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        });

        socket.on('redirect', (url) => {
            removeLoadingMessage();
            window.location.href = url;
        });

        socket.on('error', (errorMsg) => {
            removeLoadingMessage();
            const errorEl = document.createElement('div');
            errorEl.classList.add(
                'p-3', 
                'rounded', 
                'bg-red-100', 
                'text-red-800', 
                'max-w-[80%]', 
                'mx-auto'
            );
            errorEl.textContent = errorMsg;
            messagesContainer.appendChild(errorEl);
        });

        function sendMessage() {
            const message = messageInput.value.trim();
            if (message) {
                // Remove any existing loading message
                removeLoadingMessage();
                
                // Add user message
                const messageEl = document.createElement('div');
                messageEl.classList.add(
                    'p-3', 
                    'rounded', 
                    'bg-green-100', 
                    'text-gray-800', 
                    'max-w-[80%]', 
                    'ml-auto', 
                    'text-right'
                );
                messageEl.textContent = message;
                messagesContainer.appendChild(messageEl);
                
                // Add loading message
                const loadingMessage = createLoadingMessage();
                messagesContainer.appendChild(loadingMessage);
                
                // Emit message to server
                socket.emit('patient-message', message);
                messageInput.value = '';
                
                // Auto-scroll to bottom
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
        }
    </script>
</body>
</html>